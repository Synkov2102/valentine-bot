import { Injectable } from '@nestjs/common';
import * as TelegramBot from 'node-telegram-bot-api';
import { HandlerService } from './handler.service';
import { StateService } from './state.service';

@Injectable()
export class TelegramBotService {
  private token = process.env.TELEGRAM_BOT_TOKEN; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
  private bot: TelegramBot;

  constructor(
    private handlerService: HandlerService,
    private stateService: StateService,
  ) {
    this.bot = new TelegramBot(this.token, { polling: true });
    this.initializeHandlers();
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –±–æ—Ç–∞.
   */
  private initializeHandlers() {
    this.bot.on('callback_query', this.handleCallbackQuery.bind(this));
    this.bot.on('message', this.handleMessage.bind(this));
    this.bot.onText(/\/start/, this.handleStartCommand.bind(this));
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start.
   * @param {TelegramBot.Message} msg - –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
   */
  private async handleStartCommand(msg: TelegramBot.Message) {
    const chatId = msg.chat.id;

    if (!chatId) {
      console.error('Chat ID –Ω–µ –Ω–∞–π–¥–µ–Ω.');
      return;
    }

    const welcomeMessage = `–ü—Ä–∏–≤–µ—Ç!üåπ –Ø –±–æ—Ç –¥–ª—è –æ–±–º–µ–Ω–∞ –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫–∞–º–∏‚ù§Ô∏è\nC –º–æ–µ–π –ø–æ–º–æ—â—å—é —Ç—ã –º–æ–∂–µ—à—å –ø–æ–±–ª–∞–≥–æ–¥–∞—Ä–∏—Ç—å –∫–æ–ª–ª–µ–≥ –∏ –æ—Å—Ç–∞–≤–∏—Ç—å –∏–º –ø—Ä–∏—è—Ç–Ω—ã–µ –ø–æ—Å–ª–∞–Ω–∏—èüíå\n\n‚ú® –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n\n1Ô∏è‚É£ *–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫—É* ‚Äî –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫—É, –Ω–∞–ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç, —É–∫–∞–∑–∞—Ç—å –Ω–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–µ–ª–µ–≥—Ä–∞–º —á–µ—Ä–µ–∑ @, –∫–æ–º—É —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ. –í–∞—à–∞ –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫–∞ –±—É–¥–µ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –∞–Ω–æ–Ω–∏–º–Ω–æ–π.\n\n2Ô∏è‚É£ *–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–π –ø–æ—á—Ç–æ–≤—ã–π —è—â–∏–∫* ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å, –∫–∞–∫–∏–µ –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫–∏ –≤—ã –ø–æ–ª—É—á–∏–ª–∏.`;

    const imageUrl =
      'https://downloader.disk.yandex.ru/preview/36de2da6db6cd3a9e3f8475638098c3731bad28a2ffad5bb6c3cf0634f0e2b77/679fc00a/Fe4hwWUY6pHgl1UShRLuE4v0JQzvLLXM0mo6R7sNwXvaQy2gnSp3uPZMXwoGJalhD-SRdwLHJdZyej7EEAmbQg%3D%3D?uid=0&filename=Frame%202%20%281%29.jpg&disposition=inline&hash=&limit=0&content_type=image%2Fjpeg&owner_uid=0&tknv=v2&size=2048x2048';

    try {
      await this.bot.sendPhoto(chatId, imageUrl, {
        caption: welcomeMessage,
        parse_mode: 'Markdown',
      });
      await this.handlerService.showStandartActions(this.bot, chatId);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error);
    }
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback-–∑–∞–ø—Ä–æ—Å—ã –æ—Ç inline-–∫–Ω–æ–ø–æ–∫.
   * @param {TelegramBot.CallbackQuery} callbackQuery - Callback-–∑–∞–ø—Ä–æ—Å.
   */
  private async handleCallbackQuery(callbackQuery: TelegramBot.CallbackQuery) {
    const chatId = callbackQuery?.message?.chat.id;
    const data = callbackQuery.data;

    if (!chatId) {
      console.error('Chat ID –Ω–µ –Ω–∞–π–¥–µ–Ω.');
      return;
    }

    const [action, username] = data.split('_');

    if (data === 'view_mailbox') {
      const username = callbackQuery.from.username;
      await this.handlerService.showMailTypes(this.bot, chatId, username);
    } else if (action === 'view-all') {
      await this.handlerService.showValentinesForUser(
        this.bot,
        chatId,
        username,
        'all',
      );
    } else if (action === 'view-new') {
      await this.handlerService.showValentinesForUser(
        this.bot,
        chatId,
        username,
        'new',
      );
    } else if (data.startsWith('select_image_')) {
      const imageId = data.replace('select_image_', '');
      this.stateService.updateData(chatId, { imageId });
      this.stateService.setState(chatId, 'awaiting_text');
      await this.bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –≤–∞—à–µ–π –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫–∏:');
    } else if (data === 'cancel_form') {
      this.stateService.clearState(chatId);
      await this.handlerService.showStandartActions(this.bot, chatId);
    } else if (data === 'send_valentine') {
      await this.handlerService.startValentineForm(this.bot, chatId);
    }
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
   * @param {TelegramBot.Message} msg - –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
   */
  private async handleMessage(msg: TelegramBot.Message) {
    const chatId = msg.chat.id;
    const text = msg.text;

    if (!chatId) {
      console.error('Chat ID –Ω–µ –Ω–∞–π–¥–µ–Ω.');
      return;
    }

    if (text === '/start') return;

    const userState = this.stateService.getState(chatId);

    if (userState && userState.state) {
      await this.handlerService.handleValentineForm(this.bot, chatId, text);
      return;
    }

    if (text === '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ—á—Ç—É') {
      const username = msg.from.username;
      await this.handlerService.showMailTypes(this.bot, chatId, username);
    } else if (text === '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫—É') {
      await this.handlerService.startValentineForm(this.bot, chatId);
    } else {
      await this.handlerService.showStandartActions(this.bot, chatId);
    }
  }
}
